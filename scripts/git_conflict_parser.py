#!/usr/bin/env python3
'''
git_conflict_parser.py

Read in a diff from a merge-tree, and show the conflicts
split up by file.
'''
import argparse
import re
from typing import IO, List, Match, Optional, Pattern, Set


# GLOBALS:
FILEPATH_REGEX: Pattern = re.compile(r'^\s+base\s+[0-9]+\s+[a-fA-F0-9]+\s+(.*?)$')
START_PATTERN: str = r'+<<<<<<< .our'
END_PATTERN: str = r'+>>>>>>> .their'
DEFAULT_ENCODING: str = 'utf8'


def _output(output_file: Optional[IO], text: str, conflicting_files_only: bool=False) -> None:
    '''
    Output function -- will either write to a specified file object,
    or to stdout if the filename is None.
    '''
    if not conflicting_files_only:
        output_file.write(text) if output_file else print(text, end='')


def conflict_parser(
        filename: str,
        output_file: Optional[str],
        encoding: str=DEFAULT_ENCODING,
        conflicting_files_only: bool=False) -> None:
    '''
    Parse conflicts for the merge of two branches foo and bar
    out of the output of:
        `git merge-tree $(git merge-base foo bar) foo bar`
    Generate a conflict diff (or print to stdout).
    '''
    lines: List[str] = []
    files_with_conflicts: Set[str] = set()
    o: Optional[IO] = None
    currently_matching: bool = False
    last_diff_filename: Optional[str] = None
    with open(filename, 'r', encoding=encoding) as f:
        for line in f:
            lines.append(line)
    if output_file:
        o = open(output_file, 'w', encoding=encoding)
    for line in lines:
        m: Match = re.match(FILEPATH_REGEX, line)
        if m:
            # Store the last filename
            last_diff_filename = ''.join(m.groups(0)) + '\n'
        elif line.startswith(START_PATTERN):
            currently_matching = True
            try:
                # Write out the last filename we stored
                _output(o, last_diff_filename, conflicting_files_only)
                files_with_conflicts.add(last_diff_filename)
            except TypeError as e:
                # In this case, the format of the input file is
                # very likely messed up
                raise TypeError('Failed to match filename regex, ' +
                                'input format wrong') from e
            _output(o, line, conflicting_files_only)
        elif line.startswith(END_PATTERN):
            currently_matching = False
            _output(o, line, conflicting_files_only)
        elif currently_matching:
            _output(o, line, conflicting_files_only)
    _output(o, '', conflicting_files_only) # Final newline in file.
    if conflicting_files_only:
        # In this case we should just print out the files with conflicts:
        for f in files_with_conflicts:
            _output(o, f)
    if o:
        o.close()


def main():
    '''
    Arg parser that passes args over to conflict_parser().
    '''
    parser = argparse.ArgumentParser(
        description='Parse a diff generated by `git merge-tree` ' +
        'for conflicts in a potential `git merge` between two branches'
    )
    parser.add_argument(
        '-f',
        '--file',
        dest='filename',
        type=str,
        required=True,
        help='Path to a file containing the diff generated by `git merge-tree`'
    )
    parser.add_argument(
        '-e',
        '--encoding',
        dest='encoding',
        type=str,
        required=False,
        help='Encoding of specified file. Default: UTF-8'
    )
    parser.add_argument(
        '-o',
        '--output_file',
        dest='output_file',
        type=str,
        required=False,
        help='Optional filename to write the resulting conflict diff to. Default: STDOUT'
    )
    parser.add_argument(
        '-c',
        '--conflicts_only',
        dest='conflicts_only',
        action='store_true',
        required=False,
        help='Display files with conflicts only, rather than conflict text. Default: False'
    )
    args = parser.parse_args()
    conflict_parser(args.filename, args.output_file, args.encoding, args.conflicts_only)


if __name__ == '__main__':
    main()
