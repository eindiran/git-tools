#!/usr/bin/env bash
#===============================================================================
#
#          FILE: git-switchb
#
#         USAGE: git switchb
#
#   DESCRIPTION: Open up an interactive menu to choose between recently checked
#                out branches, and select one to switch to it.
#                See git-recentch and git-popb for more info.
#                Examples:
#                   `git switchb`   --> show all `git recentch`
#                   `git switchb 5` --> show `git recentch 5`
#
#  REQUIREMENTS: git
#
#        AUTHOR: Elliott Indiran <elliott.indiran@protonmail.com>
#===============================================================================
set -Eeuo pipefail

num_branches=${1:-10}
branches=()

# Constants:
# Current branch name and number colors:
CB_NAME_ANSI="\e[0;100m"  # Black, HI background
CB_NUM_ANSI="\e[1;97m"    # Bold, HI white
# Other branch recent name and number colors:
OBR_NUM_ANSI="\e[1;34m"    # Bold blue
OBR_NAME_ANSI="\e[1;33m"   # Bold yellow
# Other branch old name and number colors:
OBO_NUM_ANSI="\e[0;34m"    # Reg blue
OBO_NAME_ANSI="\e[0;33m"   # Reg yellow
# Final branches:
FB_FROM_NAME_ANSI="\e[1;92m" # Bold, HI green
FB_TO_NAME_ANSI="\e[1;97m"   # Bold, HI white
ANSI_RESET="\e[0m"

__reset_branches() {
    branches=()
    while IFS='' read -r line; do
        branches+=("$line")
    done < <(git recentch "${num_branches}")
}

__startswith() {
    # Check that second argument begins with first argument
    case "$2" in
        "$1"*) true   ;;
        *)     false  ;;
    esac
}

__set_branch_number() {
    if [ -n "${1//^ /}" ]; then
        num_branches="${1//^ /}"
    fi
}

__print_branches() {
    local searching="${1:-false}"
    # Print the branches; note that this will fail with a 1
    # exit code if set -e is enabled on single-entry arrays,
    # so temporarily set +e
    set +e
    # Iterate over the branches in reverse order so the most
    # recent matching branch is at the bottom.
    for ((i = ${#branches[@]} - 1; i >= 0; i--)); do
        branch="${branches[i]}"
        if ((i == 0)) && [[ "${searching}" == false ]]; then
            # Current branch:
            printf "${CB_NUM_ANSI}%d${ANSI_RESET}: ${CB_NAME_ANSI}%s${ANSI_RESET}*\n" "${i}" "${branch}"
        elif ((i <= 10)); then
            printf "${OBR_NUM_ANSI}%d${ANSI_RESET}: ${OBR_NAME_ANSI}%s${ANSI_RESET}\n" "${i}" "${branch}"
        else
            printf "${OBO_NUM_ANSI}%d${ANSI_RESET}: ${OBO_NAME_ANSI}%s${ANSI_RESET}\n" "${i}" "${branch}"
        fi
    done
    set -e
}

__search_branches() {
    # Get all branches matching a string
    branches=()  # Empty out global branches array
    while IFS='' read -r line; do
        branches+=("$line")
    done < <(
        git recentch -1 |
            grep "${1}" |
            head -n "${num_branches}" |
            sed -e 's/^[* \t]*//'  # Remove word-initial whitespace and asterisks
    )
    clear >"$(tty)" # Tidy up screen
}

new_branch=""
error_counter=0
searching=false
__reset_branches  # Set the branches initially to recent ones
while true; do
    # Print the available branches
    __print_branches "${searching}"
    # Loop taking user input until a choice is selected or the user
    # presses `q` to quit.
    printf "\nPress the number key corresponding to the desired branch\n"
    printf "to check it out, press '/' followed by a string to search,\n"
    printf "press 'r' to reset the branches after a search, press '='\n"
    printf "followed by a number to set the number of branches to return,\n"
    printf "or press 'q' to quit.\n\n"
    read -r kp
    if [[ "${kp}" == "q" ]]; then
        printf "Quitting, no changes made\n"
        exit 0
    elif [[ "${kp}" == "r" ]]; then
        clear >"$(tty)"
        __reset_branches
        searching=false
    elif __startswith "=" "${kp}"; then
        __set_branch_number "${kp:1}"
        __reset_branches
        searching=false
    elif __startswith "/" "${kp}"; then
        __search_branches "${kp:1}"
        searching=true
    elif [[ "${kp}" -ge 0 && "${kp}" -le ${#branches[@]} ]]; then
        new_branch="${branches[${kp}]}"
        break
    else
        clear >"$(tty)" # Tidy up screen, print out error and then loop
        ((error_counter++))
        if [[ "${error_counter}" -ge 4 ]]; then
            printf "Several errors in a row. Exiting\n"
            exit 1
        else
            printf "Keypress %s is INVALID. Try again.\n" "${kp}"
        fi
    fi
done

current_branch="$(git symbolic-ref --short HEAD)"
printf "\nswitchb - checking out ${FB_TO_NAME_ANSI}%s${ANSI_RESET}" "${new_branch}"
printf " from ${FB_FROM_NAME_ANSI}%s${ANSI_RESET}\n\n" "${current_branch}"
git checkout "${new_branch}"
