#!/usr/bin/env python3
"""
git_merge_parser.py

Read in the marked "CONFLICT" lines from a merge and output the file names.
Process:
    1. `git merge foo 1> /tmp/somefile`
    2. Read in /tmp/somefile with this script
    3. Find lines marked with CONFLICT
    4. Output the file names from those lines
    5. In the shell script which ingests the output of this script, read that
       in and open them in $EDITOR
"""

import argparse
import re
import sys

# GLOBALS:
SUCCESS_NO_CONFLICTS: int = 0
SUCCESS_CONFLICTS: int = 1
FAILURE: int = 2
CONFLICT_REGEX = re.compile(r"^CONFLICT\s+\([a-zA-Z0-9\-_\/]*\):\s+Merge conflict in (.*)$")
"""
Example input:

> git merge master
Auto-merging some/path/some_file_a.py
Auto-merging some/path/some_file_b.py
CONFLICT (content): Merge conflict in some/path/some_file_b.py
Auto-merging some/path/batt_sim_vp.py
Auto-merging some/path/some_file_c.py
CONFLICT (content): Merge conflict in some/path/some_file_c.py
Automatic merge failed; fix conflicts and then commit the result.
"""


def main() -> None:
    """
    Argument parser and matcher.
    """
    parser = argparse.ArgumentParser(
        description="Parse any merge conflicts generated by a merge. Exits with 0 when "
        + "none are found, 1 when the script succeeded but conflicts were found, or 2 if "
        + "the script failed in some way."
    )
    parser.add_argument(
        "-f",
        "--file",
        dest="filename",
        type=str,
        required=True,
        help="Path to a file containing the merge output",
    )
    parser.add_argument(
        "-x",
        "--exit_only",
        dest="exit_only",
        action="store_true",
        help="Don't print the conflicting files, exit codes only. Default: False",
    )
    args = parser.parse_args()
    files_with_conflicts: list[str] = []
    with open(args.filename) as f:
        for line in f:
            m = CONFLICT_REGEX.match(line)
            if m:
                if args.exit_only:
                    sys.exit(SUCCESS_CONFLICTS)
                files_with_conflicts.append(m.groups()[0].strip())
    if not args.exit_only:
        for filename in files_with_conflicts:
            print(filename + "\n")
    if files_with_conflicts:
        sys.exit(SUCCESS_CONFLICTS)
    sys.exit(SUCCESS_NO_CONFLICTS)


if __name__ == "__main__":
    try:
        main()
    except SystemExit as e:
        if e.code != FAILURE:
            raise e
    except BaseException:
        sys.exit(FAILURE)
